# [uwsgi]
#  project=testrd
#  uid=root
#  gid=root
#  base=/var/www/html
 
#  chdir=%(base)/%(project)
#  module=%(project).wsgi:application
#  master=True
#  processes=2
 
#  http= 0.0.0.0:8000 #这里直接使用uwsgi做web服务器，使用http。如果使用nginx，需要使用socket沟通。
#  buffer-size=65536
 
#  pidfile=/tmp/%(project)-master.pid
#  vacuum=True
#  max-requests=5000
#  daemonize=/tmp/%(project)-uwsgi.log
 
#  #设置一个请求的超时时间(秒)，如果一个请求超过了这个时间，则请求被丢弃
#  harakiri=60
#  #当一个请求被harakiri杀掉会，会输出一条日志
#  harakiri-verbose=true


[uwsgi]
project=testrd
uid=root
gid=root
base=/var/www/html

chdir=%(base)/%(project)
module=%(project).wsgi:application
master=True
processes=2

socket=0.0.0.0:8000
chown-socket=%(uid):root
chmod-socket=660
buffer-size=65536

pidfile=/tmp/%(project)-master.pid
daemonize=/tmp/%(project)-uwsgi.log # 以守护进程运行，并将log生成与temp文件夹。
vacuum=True
max-requests=5000

#设置一个请求的超时时间(秒)，如果一个请求超过了这个时间，则请求被丢弃
harakiri=60
post buffering=8678
#当一个请求被harakiri杀掉会，会输出一条日志
harakiri-verbose=true
#开启内存使用情况报告
memory-report=true
#设置平滑的重启（直到处理完接收到的请求）的长等待时间(秒)
reload-mercy=10
#设置工作进程使用虚拟内存超过N MB就回收重启
reload-on-as= 1024