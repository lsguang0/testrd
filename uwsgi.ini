# [uwsgi]
#  project=testrd
#  uid=root
#  gid=root
#  base=/var/www/html
 
#  chdir=%(base)/%(project)
#  module=%(project).wsgi:application
#  master=True
#  processes=2
 
#  http= 0.0.0.0:8000 #这里直接使用uwsgi做web服务器，使用http。如果使用nginx，需要使用socket沟通。
#  buffer-size=65536
 
#  pidfile=/tmp/%(project)-master.pid
#  vacuum=True
#  max-requests=5000
#  daemonize=/tmp/%(project)-uwsgi.log
 
#  #设置一个请求的超时时间(秒)，如果一个请求超过了这个时间，则请求被丢弃
#  harakiri=60
#  #当一个请求被harakiri杀掉会，会输出一条日志
#  harakiri-verbose=true


[uwsgi]
# Ubuntu系统下默认用户名
uid=root

# Ubuntu系统下默认用户组
gid=root

# 项目名
project=testrd

# 项目根目录
base = /var/www/html

# 设置工作目录
chdir=%(base)/%(project)

# wsgi文件位置
module=%(project).wsgi:application

# 主进程
master=True

# 同时进行的进程数
processes=2

# 选项1, 使用unix socket与nginx通信，仅限于uwsgi和nginx在同一主机上情形
# Nginx配置中uwsgi_pass应指向同一socket文件
# socket=/run/uwsgi/%(project).sock
 
 
# 选项2，使用TCP socket与nginx通信
# Nginx配置中uwsgi_pass应指向uWSGI服务器IP和端口
# socket=0.0.0.0:8000 或则 socket=:8000
 
 
# 选项3，使用http协议与nginx通信
# Nginx配置中proxy_pass应指向uWSGI服务器一IP和端口
# http=0.0.0.0:8000

socket=0.0.0.0:8000

# socket权限设置
chown-socket=%(uid):www-data
chmod-socket=664

# uWsgi默认的buffersize为4096，如果请求数据超过这个量会报错。这里设置为64k
buffer-size=65536

# 进程文件
pidfile=/tmp/%(project)-master.pid

# 以守护进程运行，并将log生成与temp文件夹。
daemonize=/tmp/%(project)-uwsgi.log

# 服务停止时，自动移除unix socket和pid文件
vacuum=True

# 为每个工作进程设置请求数的上限。当处理的请求总数超过这个量，进程回收重启。
max-requests=5000

#设置一个请求的超时时间(秒)，如果一个请求超过了这个时间，则请求被丢弃
harakiri=60
post buffering=8678

#当一个请求被harakiri杀掉会，会输出一条日志
harakiri-verbose=true

#开启内存使用情况报告
memory-report=true

#设置平滑的重启（直到处理完接收到的请求）的长等待时间(秒)
reload-mercy=10

#设置工作进程使用虚拟内存超过N MB就回收重启
reload-on-as= 1024